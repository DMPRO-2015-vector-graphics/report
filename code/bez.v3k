# Program demonstrating bezier animation

# Points defining the bezier curve
# p0
movu r10, #8191
movl r10, #32767
# p1
movu r11, #12287
movl r11, #8191
# p2
movu r12, #16383
movl r12, #32767
# p3
movu r13, #20479
movl r13, #8191

# Create and store the primitive
bezcube r10, r11, r12, r13
strp #0

## Constant registers
# Zero register
mov r0, #0
# increments for p0 and p2
mov r1, #-32
# increments for p1 and p3
mov r2, #32
# count limit for movement
mov r5, #768
# direction of movement
mov r6, #1
# up
mov r20, #64
# down
mov r21, #-64
# wait step
mov r31, #-1


# counter for points
mov r3, #768

.reset_count
mov r7, #8000

# loop for slowing down animation
.animate_bez
add r7, r7, r31
beq r7, r0, #2
jmp animate_bez

beq r3, r0, #2
beq r0, r0, #2
jmp ch_dir
.return_ch_dir

# increment points
add r10, r10, r1
add r12, r12, r1
add r11, r11, r2
add r13, r13, r2

# update primitive
bezcube r10, r11, r12, r13
updp #0

jmp reset_count

# Change direction of animation
.ch_dir
beq r6, r0, #8
add r1, r1, r20
add r2, r2, r21
mov r6, #1

beq r0, r0, #6
add r1, r1, r21
add r2, r2, r20
mov r6, #0

# reset counter and return
add r3, r3, r5
jmp return_ch_dir 

